For the tasks and methods to be implemented in the question the rubrick for grading each part is given below:
1. For RunsComparator compare
● Step 1: Create a function to return the difference between player1_runs and player2_runs. [1 mark]
● Step 2: Do error handling to ensure the functions return correctly. [1 mark]
2. For CricketDataHandler readPlayersFromFile
● Step 1: Create an empty list to store player details. [1 mark]
● Step 2: Open the specified file for reading data. [1 mark]
● Step 3: Ignore the first line since it contains the column names. [1 mark]
● Step 4: Read each line one by one until reaching the end of the file. [1 mark]
● Step 5: Split the line into different pieces of information. [1 mark]
● Step 6: Create a new player using this information. [1 mark]
● Step 7: Add the new player to the list. [1 mark]
● Step 8: Close the file after reading all data. [1 mark]
● Step 9: Return the complete list of players. [1 mark]
3. For CricketDataHandler writePlayersToFile
● Step 1: Prepare to write data into the specified file. [1 mark]
● Step 2: Write the column names as the first line of the file. [1 mark]
● Step 3: For each player in the list, convert their details to the desired format. [1 mark]
● Step 4: Write each player's information to the file. [1 mark]
4. For CricketDataHandler updatePlayerStats
● Step 1: Go through each player in the list. [1 mark]
● Step 2: Check if the current player's name matches the given name. [1 mark]
● Step 3: If it matches, update the player's runs with the new value. Updated value will be the sum 
of the old runs and the argument runs. For example, if a player had 100 runs and the runs 
argument (to this method) is 50, their new total should be 150 runs. [1 mark]
● Step 4: Similarly, update the player's wickets with the new value. Updated value will be the sum 
of the old wickets and the argument wickets. For example, if they had 10 wickets and the wickets 
argument (to this method) is 2, their new total should be 12 wickets[1 mark]
● Step 5: If no player matches the given name, throw an IllegalArgumentException. [1 mark]
5. For CricketDataHandler calculateTeamAverageRuns
● Step 1: Filter players belonging to the specified team. [2 marks]
● Step 2: If no players for this team exist, throw an IllegalArgumentException exception. [1 mark]
● Step 3: Calculate the total runs scored by all players from this team. [1 mark]
● Step 4: Compute and return the average runs scored. [1 mark]
6. For TeamFilter filter
● Step 1: Create an empty list for players matching the criteria. [1 mark]
● Step 2: Go through each player in the players list. [1 mark]
● Step 3: If the player's team matches the given name, add them to the list. [2 marks]
● Step 4: Return the list containing all matching players. [1 mark]
7. For AllRounderStatsFilter filter
● Step 1: Create an empty list for players matching the criteria. [1 mark]
● Step 2: Go through each player in the list. [1 mark]
● Step 3: If the player is an all-rounder and meets the given criteria for both runs and wickets, add 
them to the list. [2 marks]
● Step 4: Return the list containing all matching players. [1 mark]
